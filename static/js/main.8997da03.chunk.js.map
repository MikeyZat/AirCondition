{"version":3,"sources":["components/TimeSwapper.js","components/Emoticon.js","components/DataTable.js","components/DataWrapper.js","components/AirInfo.js","App.js","serviceWorker.js","index.js"],"names":["TimeSwapper","_this","this","react_default","a","createElement","className","props","index","undefined","onClick","Component","Emoticon","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","calculatePollution","data","pollution","key","isDataLoaded","isDataAvailable","hasOwnProperty","Math","floor","_this2","setTimeout","forceUpdate","_this$props","changeColor","DataTable","draw","params","push","value","name","canvas","document","getElementById","ctx","getContext","fillStyle","X","fillRect","fillText","i","length","h","height","width","clear","clearRect","dataList","id","DataWrapper","state","changeIndex","setState","getSensorAndData","axios","get","then","res","sensors","forEach","sensor","param","paramName","getData","catch","reason","console","log","newData","values","prevProps","components_TimeSwapper","components_Emoticon","components_DataTable","AirInfo","_ref","shouldRender","components_DataWrapper","App","showData","select","options","selectedIndex","colorCase","body","getElementsByTagName","classList","remove","add","htmlFor","onChange","components_AirInfo","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8997da03.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport \"../themes/TimeSwapper.css\"\r\n\r\nclass TimeSwapper extends Component {\r\n\r\n\r\n    render() {\r\n        return <div className=\"menu-container\">\r\n            <ul className=\"menu\">\r\n                <li className={this.props.index === 0 ? \"active\" : undefined}\r\n                    onClick={() => this.props.onClick(0)}>Now\r\n                </li>\r\n                <li className={this.props.index === 1 ? \"active\" : undefined} onClick={() => this.props.onClick(1)}>1\r\n                    hour ago\r\n                </li>\r\n                <li className={this.props.index === 2 ? \"active\" : undefined} onClick={() => this.props.onClick(2)}>24\r\n                    hours ago\r\n                </li>\r\n            </ul>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default TimeSwapper;","import React, {Component} from 'react';\r\nimport \"../themes/Emoticon.css\"\r\n\r\nclass Emoticon extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.isDataLoaded = false;\r\n        this.isDataAvailable = false\r\n    }\r\n\r\n    componentDidMount() {\r\n        setTimeout(() => {\r\n            this.forceUpdate()\r\n        }, 1000);\r\n    }\r\n\r\n    calculatePollution = (data) => {\r\n        let pollution = 0;\r\n        this.isDataLoaded = false;                  //bool flag to determine if data has loaded properly\r\n        this.isDataAvailable = false;                  //bool flag to determine if there is any available data\r\n        for (let key in data) {\r\n            this.isDataLoaded = true;\r\n            if (data.hasOwnProperty(key))\r\n                switch (key) {\r\n                    case \"pył zawieszony PM10\":\r\n                        if (data[key]) {\r\n                            this.isDataAvailable = true;\r\n                            pollution += (Math.floor(data[key] / 40));\r\n                        }\r\n                        break;\r\n\r\n                    case \"pył zawieszony PM2.5\":\r\n                        if (data[key]) {\r\n                            this.isDataAvailable = true;\r\n                            pollution += (Math.floor(data[key] / 20));\r\n                        }\r\n                        break;\r\n                    case \"dwutlenek azotu\":\r\n                        if (data[key]) {\r\n                            this.isDataAvailable = true;\r\n                            pollution += (Math.floor(data[key] / 80));\r\n                        }\r\n                        break;\r\n                    case \"dwutlenek siarki\":\r\n                        if (data[key]) {\r\n                            this.isDataAvailable = true;\r\n                            pollution += (Math.floor(data[key] / 100));\r\n                        }\r\n                        break;\r\n                    case \"benzen\":\r\n                        if (data[key]) {\r\n                            this.isDataAvailable = true;\r\n                            pollution += (Math.floor(data[key] / 5));\r\n                        }\r\n                        break;\r\n                    case \"tlenek węgla\":\r\n                        if (data[key]) {\r\n                            this.isDataAvailable = true;\r\n                            pollution += (Math.floor(data[key] / 3000));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n\r\n        }\r\n        return pollution\r\n    };\r\n\r\n    render() {\r\n        let {data, changeColor} = this.props;\r\n        let pollution = this.calculatePollution(data);\r\n        if (!this.isDataLoaded) {\r\n            return <h2></h2>\r\n        }\r\n        if (!this.isDataAvailable) {\r\n            return <h2><i className=\"em em-neutral_face\"> </i>Sprawdź później</h2>;\r\n        }\r\n        if (pollution === 0) {\r\n            changeColor(0);\r\n            return <h2><i className=\"em em-blush\"> </i>Dobra jakość powietrza</h2>;\r\n        } else if (pollution < 3) {\r\n            changeColor(1);\r\n            return <h2><i className=\"em em-neutral_face\"> </i>Bywało lepiej</h2>;\r\n        } else if (pollution < 5) {\r\n            changeColor(2);\r\n            return <h2><i className=\"em em-face_with_rolling_eyes\"> </i>Odradza się aktywność fizyczną na zewnątrz</h2>;\r\n        } else if (pollution < 7) {\r\n            changeColor(3);\r\n            return <h2><i className=\"em em-anguished\"> </i>Lepiej zostać w domu</h2>;\r\n        } else {\r\n            changeColor(4);\r\n            return <h2><i className=\"em em-dizzy_face\"> </i>Ryzyko poważnych uszczerbków na zdrowiu!</h2>;\r\n        }\r\n    };\r\n}\r\n\r\nexport default Emoticon;","import React, {Component} from 'react';\r\nimport \"../themes/DataTable.css\"\r\n\r\nclass DataTable extends Component {\r\n\r\n\r\n    componentDidMount() {\r\n        setTimeout(() => {\r\n            this.forceUpdate()\r\n        }, 1000);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.clear();\r\n        this.draw();\r\n    }\r\n\r\n    draw = () => {\r\n        let params = [];\r\n        for (let key in this.props.data) {\r\n            if (this.props.data.hasOwnProperty(key))\r\n                switch (key) {\r\n                    case \"pył zawieszony PM10\":\r\n                        params.push({\r\n                            value: this.props.data[key] / 50,\r\n                            name: 'PM10'\r\n                        });\r\n                        break;\r\n                    case \"pył zawieszony PM2.5\":\r\n                        params.push({\r\n                            value: this.props.data[key] / 25,\r\n                            name: 'PM2.5'\r\n                        });\r\n                        break;\r\n                    case \"dwutlenek azotu\":\r\n                        params.push({\r\n                            value: this.props.data[key] / 80,\r\n                            name: 'NO2'\r\n                        });\r\n                        break;\r\n                    case \"dwutlenek siarki\":\r\n                        params.push({\r\n                            value: this.props.data[key] / 125,\r\n                            name: 'SO2'\r\n                        });\r\n                        break;\r\n                    case \"benzen\":\r\n                        params.push({\r\n                            value: this.props.data[key] / 5,\r\n                            name: 'benzen'\r\n                        });\r\n                        break;\r\n                    case \"tlenek węgla\":\r\n                        params.push({\r\n                            value: this.props.data[key] / 3000,\r\n                            name: 'CO2'\r\n                        });\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n        }\r\n\r\n        let canvas = document.getElementById('myCanvas');\r\n        let ctx = canvas.getContext('2d');\r\n        ctx.fillStyle = \"#66cc66\";\r\n        let width = 10; //bar width\r\n        let X = 15; // first bar position\r\n        ctx.fillRect(X, 120, 180, 1);\r\n        ctx.fillText(\"poziom dopuszczalny\", 200, 120);\r\n        for (let i = 0; i < params.length; i++) {\r\n            ctx.fillStyle = '#f39c12';\r\n            let h = Math.floor(params[i].value * 20);\r\n            ctx.fillRect(X, canvas.height - h - 10, width, h);\r\n\r\n            X += width + 25;\r\n            ctx.fillStyle = '#f39c12';\r\n            ctx.fillText(params[i].name, X - width - 30, canvas.height);\r\n        }\r\n    };\r\n\r\n\r\n    clear = () => {\r\n        let canvas = document.getElementById('myCanvas');\r\n        let ctx = canvas.getContext('2d');\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    };\r\n\r\n\r\n    render() {\r\n        let dataList = [];\r\n        for (let key in this.props.data) {\r\n            if (this.props.data.hasOwnProperty(key) && this.props.data[key])\r\n                dataList.push(\r\n                    <li key={key}><span className=\"sensor\"> {key}:</span> {this.props.data[key]}</li>\r\n                );\r\n            else\r\n                dataList.push(\r\n                    <li key={key}><span className=\"sensor\">{key}:</span> Brak aktualnych danych</li>\r\n                );\r\n        }\r\n        return dataList.length ? (\r\n                <div>\r\n                    <ul className=\"sensors\">\r\n                        {dataList}\r\n                    </ul>\r\n                    <canvas id=\"myCanvas\"> </canvas>\r\n                </div>) :\r\n            <div>\r\n                <ul className=\"sensors\">\r\n                    <li></li>\r\n                    <li></li>\r\n                    <li></li>\r\n                    <li></li>\r\n                </ul>\r\n                <canvas id=\"myCanvas\"></canvas>\r\n            </div>;\r\n    }\r\n}\r\n\r\nexport default DataTable;","import React, {Component} from 'react';\r\nimport TimeSwapper from \"./TimeSwapper\";\r\nimport Emoticon from \"./Emoticon\";\r\nimport DataTable from \"./DataTable\";\r\nimport \"../themes/DataWrapper.css\";\r\nimport axios from 'axios';\r\n\r\nclass DataWrapper extends Component {\r\n\r\n    state = {\r\n        data: [],                               //data is an array of objects with data (index 0 - last info,\r\n        index: 0                                // index 1 - 1 hour ago, index 2 - 24 hours ago\r\n    };\r\n\r\n    changeIndex = (index) => {\r\n        this.setState({\r\n            index\r\n        })\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.getSensorAndData(this.props.id);\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.id !== prevProps.id) {\r\n            this.setState({\r\n                data: []\r\n            });\r\n            this.getSensorAndData(this.props.id);\r\n        }\r\n    }\r\n\r\n    getSensorAndData = (id) => {\r\n        axios.get('https://cors-escape.herokuapp.com/https://api.gios.gov.pl/pjp-api/rest/station/sensors/' + id)\r\n            .then(res => {\r\n                let sensors = [];\r\n                res.data.forEach(sensor => {\r\n                    sensors.push({\r\n                        id: sensor.id,\r\n                        name: sensor.param.paramName\r\n                    });\r\n                });\r\n                this.getData(sensors);\r\n            })\r\n            .catch(reason => {\r\n                console.log(reason);\r\n            });\r\n    };\r\n\r\n    getData = (sensors) => {\r\n        let newData = [{}, {}, {}];\r\n        sensors.forEach(sensor => {\r\n            axios.get(\"https://cors-escape.herokuapp.com/http://api.gios.gov.pl/pjp-api/rest/data/getData/\" + sensor.id)\r\n                .then(res => {\r\n                    newData[0][sensor.name] = res.data.values[0].value;\r\n                    newData[1][sensor.name] = res.data.values[1].value;\r\n                    newData[2][sensor.name] = res.data.values[24].value;\r\n                }).catch(reason => {\r\n                console.log(reason);\r\n            });\r\n        });\r\n        this.setState({\r\n            data: newData\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (this.state.data.length) ?\r\n            (<div className=\"data-container\">\r\n                <TimeSwapper onClick={this.changeIndex} index={this.state.index}/>\r\n                <Emoticon changeColor={this.props.changeColor} data={this.state.data[this.state.index]}/>\r\n                <DataTable data={this.state.data[this.state.index]}/>\r\n            </div>)\r\n            :\r\n            (<div className=\"data-container loading\">\r\n                    <div className=\"lds-roller\">\r\n                        <div></div>\r\n                        <div></div>\r\n                        <div></div>\r\n                        <div></div>\r\n                        <div></div>\r\n                        <div></div>\r\n                        <div></div>\r\n                        <div></div>\r\n                    </div>\r\n                    <span className=\"ld-span\">Ładuję dane...</span>\r\n                </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default DataWrapper;","import React from 'react';\r\nimport DataWrapper from \"./DataWrapper\";\r\n\r\nconst AirInfo = ({id, shouldRender, changeColor}) => {\r\n\r\n\r\n    return (shouldRender) ? (\r\n            <DataWrapper id={id} changeColor={changeColor}/>\r\n        ) :\r\n        null;\r\n\r\n\r\n};\r\n\r\nexport default AirInfo;","import React, {Component} from 'react';\nimport \"./themes/App.css\";\nimport AirInfo from './components/AirInfo'\n\nclass App extends Component {\n\n    state = {\n        shouldRender: false,\n        id:0\n    };\n\n    showData = () => {\n        let select = document.getElementById(\"regions\");\n        let id = select.options[select.selectedIndex].value;\n        if (id > 0) {\n            this.setState({\n                shouldRender: true,\n                id\n            });\n\n        }else{\n            this.setState({\n                shouldRender: false,\n                id\n            })\n        }\n\n    };\n\n    changeColor = (colorCase) =>{\n        let body = document.getElementsByTagName(\"body\")[0];\n        if(body.classList.length) body.classList.remove(body.classList);\n        switch(colorCase){\n            case 0:\n                body.classList.add(\"green\");\n                break;\n            case 1:\n                body.classList.add(\"green-yellow\");\n                break;\n            case 2:\n                body.classList.add(\"yellow\");\n                break;\n            case 3:\n                body.classList.add(\"yellow-red\");\n                break;\n            case 4:\n                body.classList.add(\"red\");\n                break;\n            default:\n                break;\n        }\n    };\n\n    render() {\n\n        return (\n            <div className=\"App\">\n                <div className=\"app-container\">\n                    <div className=\"form-container\">\n                        <header>\n                            <h1>Sprawdź stan powietrza</h1>\n                        </header>\n                        <section id=\"chooseRegion\">\n                            <form>\n                                <label htmlFor=\"region\">Wybierz dzielnicę</label>\n                                <div className=\"select\">\n                                    <select name=\"region\" id=\"regions\" onChange={this.showData}>\n                                        <option value=\"0\">Wybierz dzielnicę</option>\n                                        <option value=\"400\">al. Krasińskiego</option>\n                                        <option value=\"401\">ul. Bujaka</option>\n                                        <option value=\"402\">ul. Bulwarowa</option>\n                                        <option value=\"10121\">ul. Dietla</option>\n                                        <option value=\"10123\">ul. Złoty Róg</option>\n                                        <option value=\"10139\">os. Piastów</option>\n                                        <option value=\"10447\">ul. Wadów</option>\n                                    </select>\n                                </div>\n                            </form>\n                        </section>\n                    </div>\n                    <section id=\"airInfo\">\n                        <AirInfo\n                            shouldRender={this.state.shouldRender}\n                            id={this.state.id}\n                            changeColor = {this.changeColor}\n                        />\n                    </section>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}